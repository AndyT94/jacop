predicate jacop_diff2_strict(array [int] of var int: x,array [int] of var int: y,array [int] of var int: lx,array [int] of var int: ly);
predicate jacop_cumulative(array [int] of var int: s,array [int] of var int: d,array [int] of var int: r,var int: b);
array [1..2] of int: X_INTRODUCED_6 = [2,3];
array [1..2] of int: X_INTRODUCED_10 = [1,-1];
array [1..2] of int: X_INTRODUCED_19 = [2,-1];
array [1..2] of int: X_INTRODUCED_25 = [-1,1];
var 0..5: X_INTRODUCED_1;
var 0..5: X_INTRODUCED_2;
var 0..1: X_INTRODUCED_4;
var 0..0: X_INTRODUCED_5;
var 4..5: Width:: output_var;
var 3..3: Height:: output_var;
var 14..15: Area:: output_var:: is_defined_var;
var bool: X_INTRODUCED_22 ::var_is_introduced ;
var bool: X_INTRODUCED_26 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_27 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_28 ::var_is_introduced ;
var bool: X_INTRODUCED_30 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_31 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_32 ::var_is_introduced ;
var bool: X_INTRODUCED_35 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_36 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_37 ::var_is_introduced ;
var bool: X_INTRODUCED_40 ::var_is_introduced :: is_defined_var;
array [1..3] of var int: X:: output_array([1..3]) = [0,X_INTRODUCED_1,X_INTRODUCED_2];
array [1..3] of var int: Y:: output_array([1..3]) = [0,X_INTRODUCED_4,0];
array [1..3] of var int: X_div = [0,X_INTRODUCED_1,X_INTRODUCED_2];
array [1..3] of var int: X_rem = [0,0,0];
array [1..3] of var int: Y_div = [0,X_INTRODUCED_4,0];
array [1..3] of var int: Y_rem = [0,0,0];
array [1..2] of var int: X_INTRODUCED_7 ::var_is_introduced  = [X_INTRODUCED_4,0];
array [1..2] of var int: X_INTRODUCED_8 ::var_is_introduced  = [X_INTRODUCED_1,X_INTRODUCED_2];
constraint jacop_diff2_strict(X_INTRODUCED_8,X_INTRODUCED_7,X_INTRODUCED_6,X_INTRODUCED_6);
constraint jacop_cumulative(X_INTRODUCED_8,X_INTRODUCED_6,X_INTRODUCED_6,3);
constraint int_lin_le(X_INTRODUCED_10,[X_INTRODUCED_1,Width],-2);
constraint int_lin_le(X_INTRODUCED_10,[X_INTRODUCED_2,Width],-3);
constraint jacop_cumulative(X_INTRODUCED_7,X_INTRODUCED_6,X_INTRODUCED_6,Width);
constraint int_lin_le(X_INTRODUCED_19,[X_INTRODUCED_2,Width],-3);
constraint array_bool_or([X_INTRODUCED_22,X_INTRODUCED_26],true);
constraint bool_clause([X_INTRODUCED_27],[X_INTRODUCED_22]);
constraint array_bool_or([X_INTRODUCED_28,X_INTRODUCED_30],true);
constraint bool_clause([X_INTRODUCED_31],[X_INTRODUCED_28]);
constraint array_bool_or([X_INTRODUCED_32,X_INTRODUCED_35],true);
constraint bool_clause([X_INTRODUCED_36],[X_INTRODUCED_32]);
constraint bool_clause([X_INTRODUCED_40],[X_INTRODUCED_37]);
constraint int_times(Height,Width,Area):: defines_var(Area);
constraint int_lin_le_reif(X_INTRODUCED_25,[X_INTRODUCED_1,Width],2,X_INTRODUCED_26):: defines_var(X_INTRODUCED_26);
constraint int_le_reif(X_INTRODUCED_1,0,X_INTRODUCED_27):: defines_var(X_INTRODUCED_27);
constraint int_lin_le_reif(X_INTRODUCED_25,[X_INTRODUCED_2,Width],3,X_INTRODUCED_30):: defines_var(X_INTRODUCED_30);
constraint int_le_reif(X_INTRODUCED_2,0,X_INTRODUCED_31):: defines_var(X_INTRODUCED_31);
constraint int_lin_le_reif([-1],[X_INTRODUCED_4],-1,X_INTRODUCED_35):: defines_var(X_INTRODUCED_35);
constraint int_le_reif(X_INTRODUCED_4,0,X_INTRODUCED_36):: defines_var(X_INTRODUCED_36);
constraint int_le_reif(0,0,X_INTRODUCED_40):: defines_var(X_INTRODUCED_40);
solve :: seq_search([int_search([Area,Height],input_order,indomain_min,complete),int_search([0],input_order,indomain_min,complete),int_search([X_INTRODUCED_5,X_INTRODUCED_4],input_order,indomain_split,complete),int_search([0],input_order,indomain_min,complete),int_search([X_INTRODUCED_2,X_INTRODUCED_1],input_order,indomain_split,complete)]) satisfy;
