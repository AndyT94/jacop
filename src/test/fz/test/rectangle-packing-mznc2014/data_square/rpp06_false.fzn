predicate jacop_diff2_strict(array [int] of var int: x,array [int] of var int: y,array [int] of var int: lx,array [int] of var int: ly);
predicate jacop_cumulative(array [int] of var int: s,array [int] of var int: d,array [int] of var int: r,var int: b);
array [1..5] of int: X_INTRODUCED_12 = [2,3,4,5,6];
array [1..2] of int: X_INTRODUCED_16 = [1,-1];
array [1..2] of int: X_INTRODUCED_31 = [2,-1];
array [1..2] of int: X_INTRODUCED_40 = [-1,1];
var 0..15: X_INTRODUCED_1;
var 0..15: X_INTRODUCED_2;
var 0..15: X_INTRODUCED_3;
var 0..15: X_INTRODUCED_4;
var 0..15: X_INTRODUCED_5;
var 0..10: X_INTRODUCED_7;
var 0..10: X_INTRODUCED_8;
var 0..10: X_INTRODUCED_9;
var 0..10: X_INTRODUCED_10;
var 0..10: X_INTRODUCED_11;
var 10..15: Width:: output_var;
var 7..10: Height:: output_var;
var 91..105: Area:: output_var:: is_defined_var;
var bool: X_INTRODUCED_34 ::var_is_introduced ;
var bool: X_INTRODUCED_35 ::var_is_introduced ;
var bool: X_INTRODUCED_38 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_41 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_43 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_44 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_45 ::var_is_introduced ;
var bool: X_INTRODUCED_46 ::var_is_introduced ;
var bool: X_INTRODUCED_48 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_50 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_52 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_53 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_54 ::var_is_introduced ;
var bool: X_INTRODUCED_55 ::var_is_introduced ;
var bool: X_INTRODUCED_57 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_58 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_60 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_61 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_62 ::var_is_introduced ;
var bool: X_INTRODUCED_63 ::var_is_introduced ;
var bool: X_INTRODUCED_66 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_68 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_70 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_71 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_72 ::var_is_introduced ;
var bool: X_INTRODUCED_73 ::var_is_introduced ;
var bool: X_INTRODUCED_76 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_77 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_79 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_80 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_81 ::var_is_introduced ;
var bool: X_INTRODUCED_82 ::var_is_introduced ;
var bool: X_INTRODUCED_85 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_87 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_89 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_90 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_91 ::var_is_introduced ;
var bool: X_INTRODUCED_94 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_95 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_96 ::var_is_introduced ;
var bool: X_INTRODUCED_97 ::var_is_introduced ;
var bool: X_INTRODUCED_99 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_100 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_102 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_103 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_104 ::var_is_introduced ;
var bool: X_INTRODUCED_107 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_108 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_109 ::var_is_introduced ;
var bool: X_INTRODUCED_111 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_112 ::var_is_introduced :: is_defined_var;
array [1..6] of var int: X:: output_array([1..6]) = [0,X_INTRODUCED_1,X_INTRODUCED_2,X_INTRODUCED_3,X_INTRODUCED_4,X_INTRODUCED_5];
array [1..6] of var int: Y:: output_array([1..6]) = [0,X_INTRODUCED_7,X_INTRODUCED_8,X_INTRODUCED_9,X_INTRODUCED_10,X_INTRODUCED_11];
array [1..6] of var int: X_div = [0,X_INTRODUCED_1,X_INTRODUCED_2,X_INTRODUCED_3,X_INTRODUCED_4,X_INTRODUCED_5];
array [1..6] of var int: X_rem = [0,0,0,0,0,0];
array [1..6] of var int: Y_div = [0,X_INTRODUCED_7,X_INTRODUCED_8,X_INTRODUCED_9,X_INTRODUCED_10,X_INTRODUCED_11];
array [1..6] of var int: Y_rem = [0,0,0,0,0,0];
array [1..5] of var int: X_INTRODUCED_13 ::var_is_introduced  = [X_INTRODUCED_7,X_INTRODUCED_8,X_INTRODUCED_9,X_INTRODUCED_10,X_INTRODUCED_11];
array [1..5] of var int: X_INTRODUCED_14 ::var_is_introduced  = [X_INTRODUCED_1,X_INTRODUCED_2,X_INTRODUCED_3,X_INTRODUCED_4,X_INTRODUCED_5];
constraint jacop_diff2_strict(X_INTRODUCED_14,X_INTRODUCED_13,X_INTRODUCED_12,X_INTRODUCED_12);
constraint int_lin_le(X_INTRODUCED_16,[Height,Width],0);
constraint jacop_cumulative(X_INTRODUCED_14,X_INTRODUCED_12,X_INTRODUCED_12,Height);
constraint int_lin_le(X_INTRODUCED_16,[X_INTRODUCED_1,Width],-2);
constraint int_lin_le(X_INTRODUCED_16,[X_INTRODUCED_2,Width],-3);
constraint int_lin_le(X_INTRODUCED_16,[X_INTRODUCED_3,Width],-4);
constraint int_lin_le(X_INTRODUCED_16,[X_INTRODUCED_4,Width],-5);
constraint int_lin_le(X_INTRODUCED_16,[X_INTRODUCED_5,Width],-6);
constraint jacop_cumulative(X_INTRODUCED_13,X_INTRODUCED_12,X_INTRODUCED_12,Width);
constraint int_lin_le(X_INTRODUCED_16,[X_INTRODUCED_7,Height],-2);
constraint int_lin_le(X_INTRODUCED_16,[X_INTRODUCED_8,Height],-3);
constraint int_lin_le(X_INTRODUCED_16,[X_INTRODUCED_9,Height],-4);
constraint int_lin_le(X_INTRODUCED_16,[X_INTRODUCED_10,Height],-5);
constraint int_lin_le(X_INTRODUCED_16,[X_INTRODUCED_11,Height],-6);
constraint int_lin_le(X_INTRODUCED_31,[X_INTRODUCED_11,Height],-6);
constraint int_lin_le(X_INTRODUCED_31,[X_INTRODUCED_5,Width],-6);
constraint bool_clause([],[X_INTRODUCED_34,X_INTRODUCED_35]);
constraint array_bool_or([X_INTRODUCED_35,X_INTRODUCED_38],true);
constraint bool_clause([X_INTRODUCED_41],[X_INTRODUCED_35]);
constraint array_bool_or([X_INTRODUCED_34,X_INTRODUCED_43],true);
constraint bool_clause([X_INTRODUCED_44],[X_INTRODUCED_34]);
constraint bool_clause([],[X_INTRODUCED_45,X_INTRODUCED_46]);
constraint array_bool_or([X_INTRODUCED_46,X_INTRODUCED_48],true);
constraint bool_clause([X_INTRODUCED_50],[X_INTRODUCED_46]);
constraint array_bool_or([X_INTRODUCED_45,X_INTRODUCED_52],true);
constraint bool_clause([X_INTRODUCED_53],[X_INTRODUCED_45]);
constraint bool_clause([],[X_INTRODUCED_54,X_INTRODUCED_55]);
constraint array_bool_or([X_INTRODUCED_55,X_INTRODUCED_57],true);
constraint bool_clause([X_INTRODUCED_58],[X_INTRODUCED_55]);
constraint array_bool_or([X_INTRODUCED_54,X_INTRODUCED_60],true);
constraint bool_clause([X_INTRODUCED_61],[X_INTRODUCED_54]);
constraint bool_clause([],[X_INTRODUCED_62,X_INTRODUCED_63]);
constraint array_bool_or([X_INTRODUCED_63,X_INTRODUCED_66],true);
constraint bool_clause([X_INTRODUCED_68],[X_INTRODUCED_63]);
constraint array_bool_or([X_INTRODUCED_62,X_INTRODUCED_70],true);
constraint bool_clause([X_INTRODUCED_71],[X_INTRODUCED_62]);
constraint bool_clause([],[X_INTRODUCED_72,X_INTRODUCED_73]);
constraint array_bool_or([X_INTRODUCED_73,X_INTRODUCED_76],true);
constraint bool_clause([X_INTRODUCED_77],[X_INTRODUCED_73]);
constraint array_bool_or([X_INTRODUCED_72,X_INTRODUCED_79],true);
constraint bool_clause([X_INTRODUCED_80],[X_INTRODUCED_72]);
constraint bool_clause([],[X_INTRODUCED_81,X_INTRODUCED_82]);
constraint array_bool_or([X_INTRODUCED_82,X_INTRODUCED_85],true);
constraint bool_clause([X_INTRODUCED_87],[X_INTRODUCED_82]);
constraint array_bool_or([X_INTRODUCED_81,X_INTRODUCED_89],true);
constraint bool_clause([X_INTRODUCED_90],[X_INTRODUCED_81]);
constraint array_bool_or([X_INTRODUCED_91,X_INTRODUCED_94],true);
constraint bool_clause([X_INTRODUCED_95],[X_INTRODUCED_91]);
constraint bool_clause([],[X_INTRODUCED_96,X_INTRODUCED_97]);
constraint array_bool_or([X_INTRODUCED_97,X_INTRODUCED_99],true);
constraint bool_clause([X_INTRODUCED_100],[X_INTRODUCED_97]);
constraint array_bool_or([X_INTRODUCED_96,X_INTRODUCED_102],true);
constraint bool_clause([X_INTRODUCED_103],[X_INTRODUCED_96]);
constraint array_bool_or([X_INTRODUCED_104,X_INTRODUCED_107],true);
constraint bool_clause([X_INTRODUCED_108],[X_INTRODUCED_104]);
constraint array_bool_or([X_INTRODUCED_109,X_INTRODUCED_111],true);
constraint bool_clause([X_INTRODUCED_112],[X_INTRODUCED_109]);
constraint int_times(Height,Width,Area):: defines_var(Area);
constraint int_lin_le_reif(X_INTRODUCED_16,[X_INTRODUCED_1,Width],-5,X_INTRODUCED_38):: defines_var(X_INTRODUCED_38);
constraint int_lin_le_reif(X_INTRODUCED_40,[X_INTRODUCED_1,Width],2,X_INTRODUCED_41):: defines_var(X_INTRODUCED_41);
constraint int_le_reif(3,X_INTRODUCED_1,X_INTRODUCED_43):: defines_var(X_INTRODUCED_43);
constraint int_le_reif(X_INTRODUCED_1,0,X_INTRODUCED_44):: defines_var(X_INTRODUCED_44);
constraint int_lin_le_reif(X_INTRODUCED_16,[X_INTRODUCED_2,Width],-7,X_INTRODUCED_48):: defines_var(X_INTRODUCED_48);
constraint int_lin_le_reif(X_INTRODUCED_40,[X_INTRODUCED_2,Width],3,X_INTRODUCED_50):: defines_var(X_INTRODUCED_50);
constraint int_le_reif(4,X_INTRODUCED_2,X_INTRODUCED_52):: defines_var(X_INTRODUCED_52);
constraint int_le_reif(X_INTRODUCED_2,0,X_INTRODUCED_53):: defines_var(X_INTRODUCED_53);
constraint int_lin_le_reif(X_INTRODUCED_16,[X_INTRODUCED_3,Width],-7,X_INTRODUCED_57):: defines_var(X_INTRODUCED_57);
constraint int_lin_le_reif(X_INTRODUCED_40,[X_INTRODUCED_3,Width],4,X_INTRODUCED_58):: defines_var(X_INTRODUCED_58);
constraint int_le_reif(3,X_INTRODUCED_3,X_INTRODUCED_60):: defines_var(X_INTRODUCED_60);
constraint int_le_reif(X_INTRODUCED_3,0,X_INTRODUCED_61):: defines_var(X_INTRODUCED_61);
constraint int_lin_le_reif(X_INTRODUCED_16,[X_INTRODUCED_4,Width],-9,X_INTRODUCED_66):: defines_var(X_INTRODUCED_66);
constraint int_lin_le_reif(X_INTRODUCED_40,[X_INTRODUCED_4,Width],5,X_INTRODUCED_68):: defines_var(X_INTRODUCED_68);
constraint int_le_reif(4,X_INTRODUCED_4,X_INTRODUCED_70):: defines_var(X_INTRODUCED_70);
constraint int_le_reif(X_INTRODUCED_4,0,X_INTRODUCED_71):: defines_var(X_INTRODUCED_71);
constraint int_lin_le_reif(X_INTRODUCED_16,[X_INTRODUCED_5,Width],-10,X_INTRODUCED_76):: defines_var(X_INTRODUCED_76);
constraint int_lin_le_reif(X_INTRODUCED_40,[X_INTRODUCED_5,Width],6,X_INTRODUCED_77):: defines_var(X_INTRODUCED_77);
constraint int_le_reif(4,X_INTRODUCED_5,X_INTRODUCED_79):: defines_var(X_INTRODUCED_79);
constraint int_le_reif(X_INTRODUCED_5,0,X_INTRODUCED_80):: defines_var(X_INTRODUCED_80);
constraint int_lin_le_reif(X_INTRODUCED_16,[X_INTRODUCED_7,Height],-5,X_INTRODUCED_85):: defines_var(X_INTRODUCED_85);
constraint int_lin_le_reif(X_INTRODUCED_40,[X_INTRODUCED_7,Height],2,X_INTRODUCED_87):: defines_var(X_INTRODUCED_87);
constraint int_le_reif(3,X_INTRODUCED_7,X_INTRODUCED_89):: defines_var(X_INTRODUCED_89);
constraint int_le_reif(X_INTRODUCED_7,0,X_INTRODUCED_90):: defines_var(X_INTRODUCED_90);
constraint int_lin_le_reif(X_INTRODUCED_40,[X_INTRODUCED_8,Height],3,X_INTRODUCED_94):: defines_var(X_INTRODUCED_94);
constraint int_le_reif(X_INTRODUCED_8,0,X_INTRODUCED_95):: defines_var(X_INTRODUCED_95);
constraint int_lin_le_reif(X_INTRODUCED_16,[X_INTRODUCED_9,Height],-7,X_INTRODUCED_99):: defines_var(X_INTRODUCED_99);
constraint int_lin_le_reif(X_INTRODUCED_40,[X_INTRODUCED_9,Height],4,X_INTRODUCED_100):: defines_var(X_INTRODUCED_100);
constraint int_le_reif(3,X_INTRODUCED_9,X_INTRODUCED_102):: defines_var(X_INTRODUCED_102);
constraint int_le_reif(X_INTRODUCED_9,0,X_INTRODUCED_103):: defines_var(X_INTRODUCED_103);
constraint int_lin_le_reif(X_INTRODUCED_40,[X_INTRODUCED_10,Height],5,X_INTRODUCED_107):: defines_var(X_INTRODUCED_107);
constraint int_le_reif(X_INTRODUCED_10,0,X_INTRODUCED_108):: defines_var(X_INTRODUCED_108);
constraint int_lin_le_reif(X_INTRODUCED_40,[X_INTRODUCED_11,Height],6,X_INTRODUCED_111):: defines_var(X_INTRODUCED_111);
constraint int_le_reif(X_INTRODUCED_11,0,X_INTRODUCED_112):: defines_var(X_INTRODUCED_112);
solve :: seq_search([int_search([Area,Height],input_order,indomain_min,complete),int_search([0],input_order,indomain_min,complete),int_search([X_INTRODUCED_11,X_INTRODUCED_10,X_INTRODUCED_9,X_INTRODUCED_8,X_INTRODUCED_7],input_order,indomain_split,complete),int_search([0],input_order,indomain_min,complete),int_search([X_INTRODUCED_5,X_INTRODUCED_4,X_INTRODUCED_3,X_INTRODUCED_2,X_INTRODUCED_1],input_order,indomain_split,complete)]) satisfy;
