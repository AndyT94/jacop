predicate jacop_alldiff(array [int] of var int: x);
array [1..2] of int: X_INTRODUCED_3 = [1,-1];
var 1..9: X_INTRODUCED_1;
var 0..9: X_INTRODUCED_2;
var 0..9: X_INTRODUCED_6 ::var_is_introduced :: is_defined_var;
array [1..3] of var int: mark:: output_array([1..3]) = [0,X_INTRODUCED_1,X_INTRODUCED_2];
array [1..3] of var int: differences = [X_INTRODUCED_1,X_INTRODUCED_2,X_INTRODUCED_6];
constraint int_lin_le(X_INTRODUCED_3,[X_INTRODUCED_1,X_INTRODUCED_2],-1);
constraint jacop_alldiff(differences);
constraint int_lin_le([2,-1],[X_INTRODUCED_1,X_INTRODUCED_2],-1);
constraint int_lin_eq([1,-1,-1],[X_INTRODUCED_2,X_INTRODUCED_1,X_INTRODUCED_6],0):: defines_var(X_INTRODUCED_6);
solve :: int_search(mark,input_order,indomain,complete) minimize X_INTRODUCED_2;
