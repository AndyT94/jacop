predicate jacop_alldiff(array [int] of var int: x);
array [1..2] of int: X_INTRODUCED_7 = [1,-1];
var 1..49: X_INTRODUCED_1;
var 0..49: X_INTRODUCED_2;
var 0..49: X_INTRODUCED_3;
var 0..49: X_INTRODUCED_4;
var 0..49: X_INTRODUCED_5;
var 0..49: X_INTRODUCED_6;
var 0..49: X_INTRODUCED_14 ::var_is_introduced :: is_defined_var;
var 0..49: X_INTRODUCED_15 ::var_is_introduced :: is_defined_var;
var 0..49: X_INTRODUCED_16 ::var_is_introduced :: is_defined_var;
var 0..49: X_INTRODUCED_17 ::var_is_introduced :: is_defined_var;
var 0..49: X_INTRODUCED_18 ::var_is_introduced :: is_defined_var;
var 0..49: X_INTRODUCED_19 ::var_is_introduced :: is_defined_var;
var 0..49: X_INTRODUCED_20 ::var_is_introduced :: is_defined_var;
var 0..49: X_INTRODUCED_21 ::var_is_introduced :: is_defined_var;
var 0..49: X_INTRODUCED_22 ::var_is_introduced :: is_defined_var;
var 0..49: X_INTRODUCED_23 ::var_is_introduced :: is_defined_var;
var 0..49: X_INTRODUCED_24 ::var_is_introduced :: is_defined_var;
var 0..49: X_INTRODUCED_25 ::var_is_introduced :: is_defined_var;
var 0..49: X_INTRODUCED_26 ::var_is_introduced :: is_defined_var;
var 0..49: X_INTRODUCED_27 ::var_is_introduced :: is_defined_var;
var 0..49: X_INTRODUCED_28 ::var_is_introduced :: is_defined_var;
array [1..7] of var int: mark:: output_array([1..7]) = [0,X_INTRODUCED_1,X_INTRODUCED_2,X_INTRODUCED_3,X_INTRODUCED_4,X_INTRODUCED_5,X_INTRODUCED_6];
array [1..21] of var int: differences = [X_INTRODUCED_1,X_INTRODUCED_2,X_INTRODUCED_3,X_INTRODUCED_4,X_INTRODUCED_5,X_INTRODUCED_6,X_INTRODUCED_14,X_INTRODUCED_15,X_INTRODUCED_16,X_INTRODUCED_17,X_INTRODUCED_18,X_INTRODUCED_19,X_INTRODUCED_20,X_INTRODUCED_21,X_INTRODUCED_22,X_INTRODUCED_23,X_INTRODUCED_24,X_INTRODUCED_25,X_INTRODUCED_26,X_INTRODUCED_27,X_INTRODUCED_28];
constraint int_lin_le(X_INTRODUCED_7,[X_INTRODUCED_1,X_INTRODUCED_2],-1);
constraint int_lin_le(X_INTRODUCED_7,[X_INTRODUCED_2,X_INTRODUCED_3],-1);
constraint int_lin_le(X_INTRODUCED_7,[X_INTRODUCED_3,X_INTRODUCED_4],-1);
constraint int_lin_le(X_INTRODUCED_7,[X_INTRODUCED_4,X_INTRODUCED_5],-1);
constraint int_lin_le(X_INTRODUCED_7,[X_INTRODUCED_5,X_INTRODUCED_6],-1);
constraint jacop_alldiff(differences);
constraint int_lin_le([1,-1,1],[X_INTRODUCED_1,X_INTRODUCED_6,X_INTRODUCED_5],-1);
constraint int_lin_eq([1,-1,-1],[X_INTRODUCED_2,X_INTRODUCED_1,X_INTRODUCED_14],0):: defines_var(X_INTRODUCED_14);
constraint int_lin_eq([1,-1,-1],[X_INTRODUCED_3,X_INTRODUCED_1,X_INTRODUCED_15],0):: defines_var(X_INTRODUCED_15);
constraint int_lin_eq([1,-1,-1],[X_INTRODUCED_4,X_INTRODUCED_1,X_INTRODUCED_16],0):: defines_var(X_INTRODUCED_16);
constraint int_lin_eq([1,-1,-1],[X_INTRODUCED_5,X_INTRODUCED_1,X_INTRODUCED_17],0):: defines_var(X_INTRODUCED_17);
constraint int_lin_eq([1,-1,-1],[X_INTRODUCED_6,X_INTRODUCED_1,X_INTRODUCED_18],0):: defines_var(X_INTRODUCED_18);
constraint int_lin_eq([1,-1,-1],[X_INTRODUCED_3,X_INTRODUCED_2,X_INTRODUCED_19],0):: defines_var(X_INTRODUCED_19);
constraint int_lin_eq([1,-1,-1],[X_INTRODUCED_4,X_INTRODUCED_2,X_INTRODUCED_20],0):: defines_var(X_INTRODUCED_20);
constraint int_lin_eq([1,-1,-1],[X_INTRODUCED_5,X_INTRODUCED_2,X_INTRODUCED_21],0):: defines_var(X_INTRODUCED_21);
constraint int_lin_eq([1,-1,-1],[X_INTRODUCED_6,X_INTRODUCED_2,X_INTRODUCED_22],0):: defines_var(X_INTRODUCED_22);
constraint int_lin_eq([1,-1,-1],[X_INTRODUCED_4,X_INTRODUCED_3,X_INTRODUCED_23],0):: defines_var(X_INTRODUCED_23);
constraint int_lin_eq([1,-1,-1],[X_INTRODUCED_5,X_INTRODUCED_3,X_INTRODUCED_24],0):: defines_var(X_INTRODUCED_24);
constraint int_lin_eq([1,-1,-1],[X_INTRODUCED_6,X_INTRODUCED_3,X_INTRODUCED_25],0):: defines_var(X_INTRODUCED_25);
constraint int_lin_eq([1,-1,-1],[X_INTRODUCED_5,X_INTRODUCED_4,X_INTRODUCED_26],0):: defines_var(X_INTRODUCED_26);
constraint int_lin_eq([1,-1,-1],[X_INTRODUCED_6,X_INTRODUCED_4,X_INTRODUCED_27],0):: defines_var(X_INTRODUCED_27);
constraint int_lin_eq([1,-1,-1],[X_INTRODUCED_6,X_INTRODUCED_5,X_INTRODUCED_28],0):: defines_var(X_INTRODUCED_28);
solve :: int_search(mark,input_order,indomain,complete) minimize X_INTRODUCED_6;
