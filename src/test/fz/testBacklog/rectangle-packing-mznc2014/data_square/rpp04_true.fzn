predicate jacop_diff2_strict(array [int] of var int: x,array [int] of var int: y,array [int] of var int: lx,array [int] of var int: ly);
predicate jacop_cumulative(array [int] of var int: s,array [int] of var int: d,array [int] of var int: r,var int: b);
array [1..4] of int: X_INTRODUCED_8 = [1,2,3,4];
array [1..2] of int: X_INTRODUCED_10 = [1,-1];
array [1..2] of int: X_INTRODUCED_23 = [2,-1];
array [1..2] of int: X_INTRODUCED_31 = [-1,1];
var 0..7: X_INTRODUCED_0;
var 0..7: X_INTRODUCED_1;
var 0..7: X_INTRODUCED_2;
var 0..7: X_INTRODUCED_3;
var 0..4: X_INTRODUCED_4;
var 0..3: X_INTRODUCED_5;
var 0..2: X_INTRODUCED_6;
var 0..0: X_INTRODUCED_7;
var 6..7: Width:: output_var;
var 5..5: Height:: output_var;
var 30..35: Area:: output_var:: is_defined_var;
var bool: X_INTRODUCED_26 ::var_is_introduced ;
var bool: X_INTRODUCED_27 ::var_is_introduced ;
var bool: X_INTRODUCED_30 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_32 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_34 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_35 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_36 ::var_is_introduced ;
var bool: X_INTRODUCED_39 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_40 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_41 ::var_is_introduced ;
var bool: X_INTRODUCED_44 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_45 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_46 ::var_is_introduced ;
var bool: X_INTRODUCED_48 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_49 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_50 ::var_is_introduced ;
var bool: X_INTRODUCED_51 ::var_is_introduced ;
var bool: X_INTRODUCED_54 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_55 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_57 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_58 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_59 ::var_is_introduced ;
var bool: X_INTRODUCED_62 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_63 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_64 ::var_is_introduced ;
var bool: X_INTRODUCED_67 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_68 ::var_is_introduced :: is_defined_var;
array [1..4] of var int: X:: output_array([1..4]) = [X_INTRODUCED_0,X_INTRODUCED_1,X_INTRODUCED_2,X_INTRODUCED_3];
array [1..4] of var int: Y:: output_array([1..4]) = [X_INTRODUCED_4,X_INTRODUCED_5,X_INTRODUCED_6,0];
array [1..4] of var int: X_div = [X_INTRODUCED_0,X_INTRODUCED_1,X_INTRODUCED_2,X_INTRODUCED_3];
array [1..4] of var int: X_rem = [0,0,0,0];
array [1..4] of var int: Y_div = [X_INTRODUCED_4,X_INTRODUCED_5,X_INTRODUCED_6,0];
array [1..4] of var int: Y_rem = [0,0,0,0];
constraint jacop_diff2_strict(X,Y,X_INTRODUCED_8,X_INTRODUCED_8);
constraint jacop_cumulative(X,X_INTRODUCED_8,X_INTRODUCED_8,5);
constraint int_lin_le(X_INTRODUCED_10,[X_INTRODUCED_0,Width],-1);
constraint int_lin_le(X_INTRODUCED_10,[X_INTRODUCED_1,Width],-2);
constraint int_lin_le(X_INTRODUCED_10,[X_INTRODUCED_2,Width],-3);
constraint int_lin_le(X_INTRODUCED_10,[X_INTRODUCED_3,Width],-4);
constraint jacop_cumulative(Y,X_INTRODUCED_8,X_INTRODUCED_8,Width);
constraint int_lin_le(X_INTRODUCED_23,[X_INTRODUCED_3,Width],-4);
constraint bool_clause([],[X_INTRODUCED_26,X_INTRODUCED_27]);
constraint array_bool_or([X_INTRODUCED_27,X_INTRODUCED_30],true);
constraint bool_clause([X_INTRODUCED_32],[X_INTRODUCED_27]);
constraint array_bool_or([X_INTRODUCED_26,X_INTRODUCED_34],true);
constraint bool_clause([X_INTRODUCED_35],[X_INTRODUCED_26]);
constraint array_bool_or([X_INTRODUCED_36,X_INTRODUCED_39],true);
constraint bool_clause([X_INTRODUCED_40],[X_INTRODUCED_36]);
constraint array_bool_or([X_INTRODUCED_41,X_INTRODUCED_44],true);
constraint bool_clause([X_INTRODUCED_45],[X_INTRODUCED_41]);
constraint array_bool_or([X_INTRODUCED_46,X_INTRODUCED_48],true);
constraint bool_clause([X_INTRODUCED_49],[X_INTRODUCED_46]);
constraint bool_clause([],[X_INTRODUCED_50,X_INTRODUCED_51]);
constraint array_bool_or([X_INTRODUCED_51,X_INTRODUCED_54],true);
constraint bool_clause([X_INTRODUCED_55],[X_INTRODUCED_51]);
constraint array_bool_or([X_INTRODUCED_50,X_INTRODUCED_57],true);
constraint bool_clause([X_INTRODUCED_58],[X_INTRODUCED_50]);
constraint array_bool_or([X_INTRODUCED_59,X_INTRODUCED_62],true);
constraint bool_clause([X_INTRODUCED_63],[X_INTRODUCED_59]);
constraint array_bool_or([X_INTRODUCED_64,X_INTRODUCED_67],true);
constraint bool_clause([X_INTRODUCED_68],[X_INTRODUCED_64]);
constraint int_times(Height,Width,Area):: defines_var(Area);
constraint int_lin_le_reif(X_INTRODUCED_10,[X_INTRODUCED_0,Width],-2,X_INTRODUCED_30):: defines_var(X_INTRODUCED_30);
constraint int_lin_le_reif(X_INTRODUCED_31,[X_INTRODUCED_0,Width],1,X_INTRODUCED_32):: defines_var(X_INTRODUCED_32);
constraint int_le_reif(1,X_INTRODUCED_0,X_INTRODUCED_34):: defines_var(X_INTRODUCED_34);
constraint int_le_reif(X_INTRODUCED_0,0,X_INTRODUCED_35):: defines_var(X_INTRODUCED_35);
constraint int_lin_le_reif(X_INTRODUCED_31,[X_INTRODUCED_1,Width],2,X_INTRODUCED_39):: defines_var(X_INTRODUCED_39);
constraint int_le_reif(X_INTRODUCED_1,0,X_INTRODUCED_40):: defines_var(X_INTRODUCED_40);
constraint int_lin_le_reif(X_INTRODUCED_31,[X_INTRODUCED_2,Width],3,X_INTRODUCED_44):: defines_var(X_INTRODUCED_44);
constraint int_le_reif(X_INTRODUCED_2,0,X_INTRODUCED_45):: defines_var(X_INTRODUCED_45);
constraint int_lin_le_reif(X_INTRODUCED_31,[X_INTRODUCED_3,Width],4,X_INTRODUCED_48):: defines_var(X_INTRODUCED_48);
constraint int_le_reif(X_INTRODUCED_3,0,X_INTRODUCED_49):: defines_var(X_INTRODUCED_49);
constraint int_lin_le_reif([1],[X_INTRODUCED_4],3,X_INTRODUCED_54):: defines_var(X_INTRODUCED_54);
constraint int_lin_le_reif([-1],[X_INTRODUCED_4],-4,X_INTRODUCED_55):: defines_var(X_INTRODUCED_55);
constraint int_le_reif(1,X_INTRODUCED_4,X_INTRODUCED_57):: defines_var(X_INTRODUCED_57);
constraint int_le_reif(X_INTRODUCED_4,0,X_INTRODUCED_58):: defines_var(X_INTRODUCED_58);
constraint int_lin_le_reif([-1],[X_INTRODUCED_5],-3,X_INTRODUCED_62):: defines_var(X_INTRODUCED_62);
constraint int_le_reif(X_INTRODUCED_5,0,X_INTRODUCED_63):: defines_var(X_INTRODUCED_63);
constraint int_lin_le_reif([-1],[X_INTRODUCED_6],-2,X_INTRODUCED_67):: defines_var(X_INTRODUCED_67);
constraint int_le_reif(X_INTRODUCED_6,0,X_INTRODUCED_68):: defines_var(X_INTRODUCED_68);
solve :: seq_search([int_search([Area,Height],input_order,indomain_min,complete),int_search([0],input_order,indomain_min,complete),int_search([X_INTRODUCED_7,X_INTRODUCED_6,X_INTRODUCED_5,X_INTRODUCED_4],input_order,indomain_split,complete),int_search([0],input_order,indomain_min,complete),int_search([X_INTRODUCED_3,X_INTRODUCED_2,X_INTRODUCED_1,X_INTRODUCED_0],input_order,indomain_split,complete)]) satisfy;
